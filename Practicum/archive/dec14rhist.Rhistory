# Order the data from smallest to largest providing order statistic
x <- sort(x, decreasing=FALSE)
# Then provide a jitter
#noise <- .05*(max(y)-min(y))
#y<-y+rnorm(size)*noise
#x <- x-min(x)
# Provide X values for raw data plot
#x <- seq(1:size)/size
## Plot the raw data order statistic and R density plot
#d <- density(y)
#plot(x,y, main="Monte Carlo Order Statistic Plot")
#plot(d,main="Monte Carlo Density Using R Kernel")
# Calculate the raw density estimate
n<-size
g=c(0)
for (j in 2:size) {
g[j]=(n*(x[j]-x[j-1]))^-1 }
plot(x,g)
lines(x[order(x)], g[order(x)], xlim=range(x), ylim=range(g), pch=16)
# Bruce Goldfeder
# CSI PhD Candidacy Project
# Dr. Edward Wegman
# Nov 26, 2019
# Load ISO library
library(Iso)
# Variables
size <- 1500
# Create Monte Carlo (MC)
# First create a random normal distribution
x <- rnorm(size)
# Order the data from smallest to largest providing order statistic
x <- sort(x, decreasing=FALSE)
# Then provide a jitter
#noise <- .05*(max(y)-min(y))
#y<-y+rnorm(size)*noise
#x <- x-min(x)
# Provide X values for raw data plot
#x <- seq(1:size)/size
## Plot the raw data order statistic and R density plot
#d <- density(y)
#plot(x,y, main="Monte Carlo Order Statistic Plot")
#plot(d,main="Monte Carlo Density Using R Kernel")
# Calculate the raw density estimate
n<-size
g=c(0)
for (j in 2:size) {
g[j]=1/(n*(x[j]-x[j-1]))}
plot(x,g)
lines(x[order(x)], g[order(x)], xlim=range(x), ylim=range(g), pch=16)
# ISO Library method ufit
z <- ufit(g,x=x,type="b")
plot(x,y)
lines(z,col="red")
plot(z$h,do.points=FALSE,col.hor="blue",col.vert="blue",add=TRUE)
# Bruce Goldfeder
# CSI PhD Candidacy Project
# Dr. Edward Wegman
# Nov 26, 2019
# Load ISO library
library(Iso)
# Variables
size <- 1500
# Create Monte Carlo (MC)
# First create a random normal distribution
x <- rnorm(size)
# Order the data from smallest to largest providing order statistic
x <- sort(x, decreasing=FALSE)
# Then provide a jitter
#noise <- .05*(max(y)-min(y))
#y<-y+rnorm(size)*noise
#x <- x-min(x)
# Provide X values for raw data plot
#x <- seq(1:size)/size
## Plot the raw data order statistic and R density plot
#d <- density(y)
#plot(x,y, main="Monte Carlo Order Statistic Plot")
#plot(d,main="Monte Carlo Density Using R Kernel")
# Calculate the raw density estimate
n<-size
g=c(0)
for (j in 2:size) {
g[j]=1/(n*(x[j]-x[j-1]))}
plot(x,g)
lines(x[order(x)], g[order(x)], xlim=range(x), ylim=range(g), pch=16)
# ISO Library method ufit
z <- ufit(g,x=x,type="b")
plot(x,y)
lines(z,col="red")
plot(z$h,do.points=FALSE,col.hor="blue",col.vert="blue",add=TRUE)
# Bruce Goldfeder
# CSI PhD Candidacy Project
# Dr. Edward Wegman
# Nov 26, 2019
# Load ISO library
library(Iso)
# Variables
size <- 1500
# Create Monte Carlo (MC)
# First create a random normal distribution
x <- rnorm(size)
# Order the data from smallest to largest providing order statistic
x <- sort(x, decreasing=FALSE)
# Then provide a jitter
#noise <- .05*(max(y)-min(y))
#y<-y+rnorm(size)*noise
#x <- x-min(x)
# Provide X values for raw data plot
#x <- seq(1:size)/size
## Plot the raw data order statistic and R density plot
#d <- density(y)
#plot(x,y, main="Monte Carlo Order Statistic Plot")
#plot(d,main="Monte Carlo Density Using R Kernel")
# Calculate the raw density estimate
n<-size
g=c(0)
for (j in 2:size) {
g[j]=1/(n*(x[j]-x[j-1]))}
plot(x,g)
lines(x[order(x)], g[order(x)], xlim=range(x), ylim=range(g), pch=16)
summary(g)
summary(x)
# Bruce Goldfeder
# CSI PhD Candidacy Project
# Dr. Edward Wegman
# Nov 26, 2019
# Load ISO library
library(Iso)
# Variables
size <- 1500
# Create Monte Carlo (MC)
# First create a random normal distribution
x <- rnorm(size)
# Order the data from smallest to largest providing order statistic
x <- sort(x, decreasing=FALSE)
# Then provide a jitter
#noise <- .05*(max(y)-min(y))
#y<-y+rnorm(size)*noise
#x <- x-min(x)
# Provide X values for raw data plot
#x <- seq(1:size)/size
## Plot the raw data order statistic and R density plot
#d <- density(y)
#plot(x,y, main="Monte Carlo Order Statistic Plot")
#plot(d,main="Monte Carlo Density Using R Kernel")
# Calculate the raw density estimate
n<-size
g=c(0)
for (j in 2:size) {
g[j]=1/(n*(x[j]-x[j-1]))}
plot(x,g)
lines(x[order(x)], g[order(x)], xlim=range(x), ylim=range(g), pch=16)
# ISO Library method ufit
#z <- ufit(g,x=x,type="b")
#plot(x,g)
#lines(z,col="red")
#plot(z$h,do.points=FALSE,col.hor="blue",col.vert="blue",add=TRUE)
# ISO Library method PAVA
#z<-g
#zstar <- pava(z)
#plot(z)
#lines(zstar,type='s')
# Using the stepfunction:
zstar <- pava(z,stepfun=TRUE)
plot(z)
plot(zstar,add=TRUE,verticals=FALSE,pch=20,col.points="red")
# Bruce Goldfeder
# CSI PhD Candidacy Project
# Dr. Edward Wegman
# Nov 26, 2019
# Load ISO library
library(Iso)
# Variables
size <- 1500
# Create Monte Carlo (MC)
# First create a random normal distribution
x <- rnorm(size)
# Order the data from smallest to largest providing order statistic
x <- sort(x, decreasing=FALSE)
# Then provide a jitter
#noise <- .05*(max(y)-min(y))
#y<-y+rnorm(size)*noise
#x <- x-min(x)
# Provide X values for raw data plot
#x <- seq(1:size)/size
## Plot the raw data order statistic and R density plot
#d <- density(y)
#plot(x,y, main="Monte Carlo Order Statistic Plot")
#plot(d,main="Monte Carlo Density Using R Kernel")
# Calculate the raw density estimate
n<-size
g=c(0)
for (j in 2:size) {
g[j]=1/(n*(x[j]-x[j-1]))}
plot(x,g)
lines(x[order(x)], g[order(x)], xlim=range(x), ylim=range(g), pch=16)
# ISO Library method ufit
#z <- ufit(g,x=x,type="b")
#plot(x,g)
#lines(z,col="red")
#plot(z$h,do.points=FALSE,col.hor="blue",col.vert="blue",add=TRUE)
# ISO Library method PAVA
#z<-g
#zstar <- pava(z)
#plot(z)
#lines(zstar,type='s')
# Using the stepfunction:
zstar <- pava(g,stepfun=TRUE)
plot(g)
plot(zstar,add=TRUE,verticals=FALSE,pch=20,col.points="red")
# Bruce Goldfeder
# CSI PhD Candidacy Project
# Dr. Edward Wegman
# Nov 26, 2019
# Load ISO library
library(Iso)
# Variables
size <- 100
# Create Monte Carlo (MC)
# First create a random normal distribution
x <- rnorm(size)
# Order the data from smallest to largest providing order statistic
x <- sort(x, decreasing=FALSE)
# Then provide a jitter
#noise <- .05*(max(y)-min(y))
#y<-y+rnorm(size)*noise
#x <- x-min(x)
# Provide X values for raw data plot
#x <- seq(1:size)/size
## Plot the raw data order statistic and R density plot
#d <- density(y)
#plot(x,y, main="Monte Carlo Order Statistic Plot")
#plot(d,main="Monte Carlo Density Using R Kernel")
# Calculate the raw density estimate
n<-size
g=c(0)
for (j in 2:size) {
g[j]=1/(n*(x[j]-x[j-1]))}
plot(x,g)
lines(x[order(x)], g[order(x)], xlim=range(x), ylim=range(g), pch=16)
# ISO Library method ufit
#z <- ufit(g,x=x,type="b")
#plot(x,g)
#lines(z,col="red")
#plot(z$h,do.points=FALSE,col.hor="blue",col.vert="blue",add=TRUE)
# ISO Library method PAVA
#z<-g
#zstar <- pava(z)
#plot(z)
#lines(zstar,type='s')
# Using the stepfunction:
zstar <- pava(g,stepfun=TRUE)
plot(g)
plot(zstar,add=TRUE,verticals=FALSE,pch=20,col.points="red")
# Bruce Goldfeder
# CSI PhD Candidacy Project
# Dr. Edward Wegman
# Nov 26, 2019
# Load ISO library
library(Iso)
# Variables
size <- 100
# Create Monte Carlo (MC)
# First create a random normal distribution
x <- rnorm(size)
# Order the data from smallest to largest providing order statistic
x <- sort(x, decreasing=FALSE)
# Then provide a jitter
#noise <- .05*(max(y)-min(y))
#y<-y+rnorm(size)*noise
#x <- x-min(x)
# Provide X values for raw data plot
#x <- seq(1:size)/size
## Plot the raw data order statistic and R density plot
#d <- density(y)
#plot(x,y, main="Monte Carlo Order Statistic Plot")
#plot(d,main="Monte Carlo Density Using R Kernel")
# Calculate the raw density estimate
n<-size
g=c(0)
for (j in 2:size) {
g[j]=1/(n*(x[j]-x[j-1]))}
plot(x,g)
lines(x[order(x)], g[order(x)], xlim=range(x), ylim=range(g), pch=16)
# ISO Library method ufit
#z <- ufit(g,x=x,type="b")
#plot(x,g)
#lines(z,col="red")
#plot(z$h,do.points=FALSE,col.hor="blue",col.vert="blue",add=TRUE)
# ISO Library method PAVA
#z<-g
#zstar <- pava(z)
#plot(z)
#lines(zstar,type='s')
# Using the stepfunction:
zstar <- pava(g,stepfun=TRUE)
plot(g)
plot(zstar,add=TRUE,verticals=FALSE,pch=20,col.points="red")
hist(x)
# Bruce Goldfeder
# CSI PhD Candidacy Project
# Dr. Edward Wegman
# Nov 26, 2019
# Load ISO library
library(Iso)
# Variables
size <- 1500
# Create Monte Carlo (MC)
# First create a random normal distribution
x <- rnorm(size)
# Order the data from smallest to largest providing order statistic
x <- sort(x, decreasing=FALSE)
# Then provide a jitter
#noise <- .05*(max(y)-min(y))
#y<-y+rnorm(size)*noise
x <- x-min(x)
hist(x)
n<-size
g=c(0)
for (j in 2:size) {
g[j]=1/(n*(x[j]-x[j-1]))}
plot(x,g)
lines(x[order(x)], g[order(x)], xlim=range(x), ylim=range(g), pch=16)
n<-size
g=c(0)
# I may have the value for n incorrect?
for (j in 2:size) {
g[j]=1/(j*(x[j]-x[j-1]))}
plot(x,g)
lines(x[order(x)], g[order(x)], xlim=range(x), ylim=range(g), pch=16)
# Bruce Goldfeder
# CSI PhD Candidacy Project
# Dr. Edward Wegman
# Nov 26, 2019
# Load ISO library
library(Iso)
# Variables
size <- 1500
# Create Monte Carlo (MC)
# First create a random normal distribution
x <- rnorm(size)
# Order the data from smallest to largest providing order statistic?
x <- sort(x, decreasing=FALSE)
# Then provide a jitter
#noise <- .05*(max(y)-min(y))
#y<-y+rnorm(size)*noise
x <- x-min(x)
# Provide X values for raw data plot
#x <- seq(1:size)/size
## Plot the raw data order statistic and R density plot
#d <- density(y)
#plot(x,y, main="Monte Carlo Order Statistic Plot")
#plot(d,main="Monte Carlo Density Using R Kernel")
# Calculate the raw density estimate
n<-size
g=c(0)
# I may have the value for n incorrect?
for (j in 2:size) {
g[j]=1/(n*(x[j]-x[j-1]))}
plot(x,g)
lines(x[order(x)], g[order(x)], xlim=range(x), ylim=range(g), pch=16)
# ISO Library method ufit
#z <- ufit(g,x=x,type="b")
#plot(x,g)
#lines(z,col="red")
#plot(z$h,do.points=FALSE,col.hor="blue",col.vert="blue",add=TRUE)
# ISO Library method PAVA
z<-g
zstar <- pava(z)
plot(z)
lines(zstar,type='s')
# Using the stepfunction:
zstar <- pava(g,stepfun=TRUE)
plot(g)
plot(zstar,add=TRUE,verticals=FALSE,pch=20,col.points="red")
# Variables
size <- 1500
# Variables
size <- 1500
# Variables
size <- 1500
# Create Monte Carlo (MC)
# First create a random normal distribution
x <- rnorm(size)
x
max(x)
min(x)
hist(x)
x <- sort(x, decreasing=FALSE)
x <- sort(x, decreasing=FALSE)
hist(x)
hist(x)
plot(x)
x
hist(x)
clear
clc
x<-norm(1500)
x<-rnorm(1500)
y<-sort(x,decreasing=FALSE)
hist(y)
plot(y)
hist(y)
n<-size
g=c(0)
prev<-0   # the j-1 variable
curr<-0   # the j variable
for (j in 2:size) {
    curr<-x[j]
    #print(curr)
    g[j]=1/(n*(curr-prev))
    prev<-x[j]
    #print(prev)
}
plot(g)
gsort<-sort(g,decreasing=FALSE)
plot(gsort)
h<-pava(g)
install.packages("Iso", repos='http://cran.us.r-project.org')
library(Iso)
h<-pava(g)
plot(h)
h[1500]
h[1000]
h[800]
h[900]
h[850]
h[875]
h[850:875]
index<-856
x[856]
incX<-x[1500:856]
h[500]
h[850]
h[800]
h[825]
h[800:825]
plot[incX]
plot[incX]
incX
y2<-y[1500:856]
plot(y2)
y3<-y[1:844]
plot(y3)
plot(y2)
plot(y3)
y3<-y[1:856]
plot(y3)
y_unord<-x[1:856]
plot(x)
plot(y_unord)
y_ord(y_unord, decreasing=TRUE)
y_ord<-(y_unord, decreasing=TRUE)
y_ord<-sort(y_unord, decreasing=TRUE)
plot(y_ord)
pv2<-pava(y_ord)
plot(pv2)
pv2<-pava(y_unord)
plot(pv2)
plot(x,y)
plot(y,x)
plot(y_ord,x[1:856])
plot(x,y)
plot(x,g)
inc<-ufit(g,x=x,lc=TRUE)
plot(inc)
inc<-ufit(g,x=y,lc=TRUE)
plot(inc)
max(inc)
max(unlist(inc))
modeInc<-max(unlist(inc))
modeInc
dec<-ufit(g,x=y,rc=TRUE)
plot(dec)
plot(dec)
dec<-ufit(g,x=y,lmode=1500,rc=TRUE)
plot(dec)
inc<-ufit(g,x=y,lmode=1,lc=TRUE)
plot(inc)
plot(dec)
right<-ufit(g,x=y,lmode=1500,rc=TRUE)
plot(right)
left<-ufit(g,x=y,lmode=1,lc=TRUE)
plot(left)
left<-ufit(g,x=-y,lmode=1,lc=TRUE)
plot(left)
max(y)
min(x)
left<-ufit(g,x=-y,lmode=-3.715927,lc=TRUE)
plot(left)
left<-ufit(g,x=y,lmode=-3.715927,lc=TRUE)
plot(left)
right<-ufit(g,x=y,lmode=4.066409,rc=TRUE)
plot(right)
plot(left)
right
left
x[750]
fhatx1m1<-ufit(g,x=y,lmode=0.0)
fhatx1m1
plot(fhatx1m1)
#multiply each element
# mle for x1m1
mle1<-prod(fhatx1m1(1:1500))
mle1<-prod(fhatx1m1[1:1500])
mle1<-prod(fhatx1m1$y)
mle1
# get 40 or so mle's and pick the least negative one
stuff<-history
stuff
history
save.image("C:\\Users\\bruce\\dev\\candidacy\\dec14edweg.RData")
plot(h)
